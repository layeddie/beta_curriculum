# Rock Paper Scissors Guards

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Rock Paper Scissors Guards

You're going to recreate your rock paper scissors game using guards.

<!-- livebook:{"force_markdown":true} -->

```elixir
RockPaperScissors.play(:rock, :paper)
"paper beats rock!"

RockPaperScissors.play(:rock, :rock)
"draw!"
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule RockPaperScissorsGuards do
  defguard is_winner(guess1, guess2)
           when {guess1, guess2} in [{:rock, :scissors}, {:paper, :rock}, {:scissors, :paper}]

  def play(guess1, guess2) when is_winner(guess1, guess2) do
    "#{guess1} beats #{guess2}!"
  end

  def play(guess1, guess2) when is_winner(guess2, guess1) do
    "#{guess2} beats #{guess1}!"
  end

  def play(guess1, guess2) when guess1 == guess2 do
    "draw!"
  end
end
```

</details>

Implement the `RockPaperScissorsGuards` module as documented below.

```elixir
defmodule RockPaperScissorsGuards do
  @moduledoc """
  Documentation for `RockPaperScissorsGuards`
  """

  @doc """
  Play rock paper scissors. Returns a string to describe who won the game.

  ## Examples

    iex> RockPaperScissorsGuards.play(:rock, :scissors)
    "rock beats scissors!"

    iex> RockPaperScissorsGuards.play(:paper, :rock)
    "paper beats rock!"

    iex> RockPaperScissorsGuards.play(:scissors, :paper)
    "scissors beats paper!"

    iex> RockPaperScissorsGuards.play(:rock, :paper)
    "paper beats rock!"

    iex> RockPaperScissorsGuards.play(:paper, :scissors)
    "scissors beats paper!"

    iex> RockPaperScissorsGuards.play(:scissors, :rock)
    "rock beats scissors!"

    iex> RockPaperScissorsGuards.play(:rock, :rock)
    "draw!"

    iex> RockPaperScissorsGuards.play(:paper, :paper)
    "draw!"

    iex> RockPaperScissorsGuards.play(:scissors, :scissors)
    "draw!"
  """

  #   RockPaperScissors.play(:rock, :paper)
  # "paper beats rock!"

  defguard is_winner(guess1, guess2)
           when {guess1, guess2} in [{:rock, :scissors}, {:paper, :rock}, {:scissors, :paper}]

  def play(guess1, guess2) when is_winner(guess1, guess2) do
    "#{guess1} beats #{guess2}!"
  end

  def play(guess1, guess2) when is_winner(guess2, guess1) do
    "#{guess2} beats #{guess1}!"
  end

  def play(guess1, guess2) when guess1 == guess2 do
    "draw!"
  end
end

# rock beats scissors
# scissors beats paper
# paper beats rock

# defmodule RockPaperScissors do
#   defguard is_guess(guess) when guess in [:rock, :paper, :scissors]

#   def winner(guess) when is_guess(guess) do
#     case guess do
#       :rock -> :paper
#       :scissors -> :rock
#       :paper -> :rock
#     end
#   end
# end

# RockPaperScissors.winner(:rock)
```

```elixir
defmodule RockPaperScissors do
  @moduledoc """
  Rock Paper Scissors Lizard Spock Game
  """

  @doc """
  Returns true if the first guess beats the second, and false otherwise.

  ## Winning Examples

    iex> RockPaperScissorsLizardSpock.beats?(:rock, :lizard)
    true

     iex> RockPaperScissorsLizardSpock.beats?(:lizard, :rock)
     false

    iex> RockPaperScissorsLizardSpock.beats?(:rock, :rock)
    false
  """

  def beats?(guess1, guess2) do
    case {guess1, guess2} do
      {:rock, :scissors} -> true
      {:scissors, :paper} -> true
      {:rock, :lizard} -> true
      {:lizard, :spock} -> true
      {:paper, :rock} -> true
      {:spock, :scissors} -> true
      {:scissors, :lizard} -> true
      {:lizard, :paper} -> true
      {:paper, :spock} -> true
      {:spock, :rock} -> true
      _ -> false
    end
  end

  # player1 = Enum.random(["rock", "paper", "scissors", "lizard", "spock"])
  # player2 = Enum.random(["rock", "paper", "scissors", "lizard", "spock"])

  @doc """
  Return "Player 1 Wins!", "Player 2 Wins!", or "Draw" depending on which player guess won.

  ## Examples

    iex> RockPaperScissorsLizardSpock.play(:rock, :lizard)
    "Player 1 Wins!"

    iex> RockPaperScissorsLizardSpock.play(:lizard, :rock)
    "Player 2 Wins!"

    iex> RockPaperScissorsLizardSpock.play(:lizard, :lizard)
    "Player Draws!"
  """
  def play(player1, player2) do
    cond do
      player1 == player2 -> "Player Draws!"
      beats?(player1, player2) == true -> "Player 1 Wins!"
      beats?(player1, player2) == false -> "Player 2 Wins!"
    end
  end
end
```

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"rps_guards_reading\"\n    \"exercises\" -> \"rps_guards_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "rps_guards_reading"
    "exercises" -> "rps_guards_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b rps-guards-exercise
$ git add .
$ git commit -m "finish rps guards exercise"
$ git push origin rps-guards-exercise
```

Create a pull request from your `rps-guards-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                                 | Next                                     |
| -------------------------------------------------------- | ---------------------------------------: |
| [Math With Guards](../exercises/math_with_guards.livemd) | [Protocols](../reading/protocols.livemd) |
